VersionHistory/Planning: (anything prior to version 1.0 is alpha/beta quality depending upon release)
::0.5.0 added partial mac support (no drivers)(?) winpe/dism not licensed for use on non-windows systems, 
::gparted can HFS+, rEFInd can boot, live distros are common, just need to find one that can access NFS/CIFS shares easily
::might need to convert batch script to .sh so maybe AriaDeployForMac
0.4.3 added optional 7z deployment scenario
0.4.2 formalized "deployment on a stick" and installer scenarios by precompiling and bunding software into "WinPE5_x64_AriaDeploy.iso" files
0.4.1 added heterogenous hardware support using WMI, (requires WMI components in PE images however), streamlined installation files
0.4.0 added support for "deployment on a stick" scenarios (by replacing qTorrent with py3bt_tracker) and made server architecture agnostic, bug fixed AriaDeploy.exe
0.3.1 refractored code, improved overall reliability, created "installer", switched to FOSS qTorrent over uTorrent for server aspect, and reduced requirements
0.3 refractored code, addedUI, improved client side reliability, changed name to "AiraDeploy"
0.2 refractored code, added server components, improved scalability (architecture agnostic using Aria instead of uTorrent3.3)
0.1 "massDeploy" concept art using uTorrent 3.3/psutils, client side only

Current version: 0.3.1, working on 0.4.0

UI:
Bug: AriaDeploy.exe does not show image file in GUI if name is too long (2nd line, should scroll instead)
Bug: AriaDeploy.exe can mess up typing settings if user presses a key in the middle of the transfer (should transfer entire line immediately)
Bug: server 2012 cmd box case sensitive (start cmd prompt with command to run in it directly)
NewFunct: index button should run dism /get-imageinfo and also /index with the current index
Bug: it should not clobber itself post deployment (or freeze randomly-prolly only when being compiled dynamicly)
Bug: Windows should be child-windows not fully independent to prevent multiple-clicking

WinPE:
NewFunct: add WMI support and windowsPE autoinstall + detection of drivers (using addDrivers.bat)
-dependency: rewrite update.bat to autoinstall WMI packages into WinPE (3,4?,5,10)
UI: write/rewrite some functionality scripts for win PE (info, start, help) -inProgress (but on hold for concept art)

Misc:
humm: windows 10 recovery
NewFunct: windows 8 recovery
backport: update windows 7 misc

autoimage:
Bug: detects boot.wims as deployable images
-If most preferred has a sources folder or bootmgr or bootmgr.efi or efi folder then it's invalid, or if <1gb in size
Bug: if no images found, there should be no output
Bug: erase previously selected image enviornmental variable on screen #2 when going back
UI: improve user interface of final screen (How it looks depends on if complex flag was triggered), remove PE info
UI: make controls and bi-directionality of script more Clear, and on every screen

deployment:
Bug: parsedfullfolderpath in drivers always shows wrong info or invalid unattend.xml tries to copy (can trigger using driver path with spaces and no quotes)
NewFunct: integrate addDrivers.bat functionality as downloading client\resources\drivers\dell_latittude e6220_win7_x86_drivers.torrent into client
Docs: create full control flow diagram using Dia -mostlydone, just need trademark logo
UI/Rewrite: create stand alone redistributable package (remove DISM)
NewFunct: write an optional installer.bat to remove any existing folders and recreate them (maybe) -requires 7zip
Docs: write documentation regarding options in deploy.ini and licensing information
Rewrite: add native 32-bit deployment capabilities AriaDeploy.bat (resources\x64, x86 folders)
NewFunct: add a private torrent flag, would be kinda nice
NewFunct: It should be possible to re-seed an existing torrent after closing aria initially
Rewrite: verpose copy from-to in scripts
Rewrite: detect resuming in an GPT->MBR switched scenario, as in if the restart partition table format doesn't match the one
-required by the current boot mode, then start over completely (repartition+redownload)
Rewrite: maybe could mark targettemplocation as hidden and system, maybe modify permissions for it
Bug: when reading settings from file, the only settings not read in should be those not commented out, for eol=:

Bugs tools:
Bug: convertwim (old?) (from flash drive) using winpe v5 x64 doesn't uefi boot when converted to iso (from misc) (180mb vs 225mb)
-dependency before "fix" possible: fully isolate existing winPE mgmt scripts (create portable, clickable 
-environment) and integrate into portableTools alongside convertWIM
NewFunct: bcdAddPE should allow adding to tools menu on isos\usbs (workaround to multiple boot menus)

Presentation:
NewFunct: add slide on windows PE
NewFunct: Add suggested image authoring station to presentation (HyperV?)
NewFunct: description of MDT
Docs: add MDTShare\Scripts\LiteTouch.vbs to workflow diagram explicitly
Rewrite: detailed Workflow for generic capture image scenario (rtm->import win7x64_retailDVD)
-also: figure out why it has that weird dependency
Docs: Add control flow diagrams to presentation
Docs: Add suggested usageGuide for MDT/Scripts -scripts as another extension of MDT in certain scenarios
NewFunct: Add suggested deployment architecture to presentation (incl scalability, separating out, having multiple seeder(s))

Long Term:
create GUI frontend? -partiallydone, any other ones needed?, compress into single installer to perserve folder structure or add "info wim" functionality to GUI
Macs? (dism not licensed for use deploying non windows OSs)